import time
import sys

data_dict = {4285445840: 75, 4183700688: 6, 4183701456: 0, 4077828048: 20, 3760075984: 191, 4181636304: 0, 4074681808: 87, 3741267408: 0, 4181702096: 0, 4179015632: 21, 3543020848: 2, 4076746448: 0, 4065212112: 63, 4286461200: 0, 4180554960: 10, 4291704528: 13, 4286494416: 16, 4181636528: 0, 4074715120: 0, 4074715088: 1, 4078876624: 15, 4179605200: 0, 4278105360: 0, 4182684880: 0, 4181112816: 0, 3753850320: 0, 4075730384: 17, 3749623504: 1, 4259231440: 132, 4074649296: 0, 4287542992: 35, 3762206704: 0, 3760076752: 27, 4180555600: 12, 4079925200: 6, 4292818896: 7, 4289672464: 0, 4180620752: 0, 4179604944: 0, 4182685104: 3, 4287575760: 19, 4280169744: 0, 4076778960: 21, 3729733328: 21, 4074157872: 802, 4282333168: 90, 4075697872: 1, 3667834576: 1, 3768464656: 0, 3743332304: 1, 4181604176: 1, 4179015664: 0, 4274926864: 0, 4291736848: 0, 4181637072: 0, 3522049840: 0, 4184749776: 29, 4181702352: 0, 3864933840: 0, 4075763696: 0, 4076746032: 0, 4284430032: 22, 4077860816: 11, 4256085712: 0, 3445536752: 0, 4075763664: 15, 4266603792: 0, 4293801232: 0, 4182685648: 0, 4076255024: 22, 4293834544: 1, 4183209936: 10, 4181604048: 10, 4181669680: 0, 4179539408: 239, 4277090288: 227, 4077795024: 5, 
4289640432: 0, 4276008304: 0, 3760175056: 0, 4183701328: 15, 4178491216: 396, 3730749392: 0, 3667867440: 0, 3668916016: 0, 4180587984: 49, 4179506480: 208, 4179572720: 125, 4078843600: 12, 4258182864: 2, 4279121168: 0, 4180621296: 15, 4184749904: 9, 4179539792: 25, 4188976400: 0, 3655317296: 22, 4281284304: 23, 3740218576: 2, 4183734224: 
0, 4181636432: 4, 3759585072: 315, 3764270416: 0, 3655219184: 31, 3760109008: 47, 3762239472: 16, 4286526736: 0, 4180588368: 62, 4289640144: 13, 4185831376: 5, 4286527472: 45, 4179539760: 41, 4282267344: 152, 3764270832: 0, 4181636848: 15, 4178491376: 0, 4182685136: 29, 4181112784: 18, 4180588496: 0, 4179539280: 0, 3763255024: 0, 4281218320: 0, 4181636944: 88, 3750639600: 0, 4186879952: 2, 4074714928: 1, 4183733712: 24, 3655218960: 103, 4278072592: 0, 3555670000: 0, 3764303312: 0, 4076812272: 0, 4181112624: 0, 4182652624: 45, 4076779344: 0, 4074648880: 0, 3764336624: 0, 4182685520: 83, 4183733456: 4, 3666786288: 122, 4179507024: 1, 4179506384: 72, 3550394160: 0, 4187927824: 0, 4181669328: 0, 4293834736: 3, 4179539696: 34, 4179539920: 0, 4279154384: 4, 3530504176: 0, 4189009168: 0, 4183734096: 34, 3752802288: 0, 4076812080: 0, 3764303696: 
0, 3550360880: 60, 4074682192: 142, 4268635408: 0, 4183799248: 7, 4180588272: 20, 4183209776: 0, 4276041712: 29, 3543086896: 0, 4182652112: 5, 4185896656: 12, 3760142160: 1, 4267685872: 1, 4292753104: 2, 4077860656: 0, 3764336464: 0, 4181603536: 9, 3752736112: 1, 4074158064: 92, 4276041424: 4, 3769546000: 0, 4179506640: 112, 4069438928: 24, 4078352176: 0, 4288624336: 2, 4269684432: 2, 4281219056: 1, 3655251952: 31, 4179507152: 365, 3766433040: 0, 3553507120: 0, 4272895696: 25, 4182717904: 0, 4186912016: 0, 3969824208: 0, 4182685424: 12, 4182685456: 0, 4282300112: 62, 3550394352: 58, 3751786192: 2, 4074682320: 74, 4293834000: 0, 3762272208: 48, 3656333264: 5, 4179572176: 25, 4179539376: 3, 4076255216: 11, 4281251536: 7, 3763254992: 0, 4293866768: 0, 4075730896: 35, 4178457808: 4, 4076812240: 11, 4181636560: 33, 3743365072: 2, 4183701200: 41, 4183766832: 6, 4178458064: 174, 4179015472: 0, 3769513264: 0, 3760109296: 5, 4074649424: 37, 4266571024: 0, 3337500656: 0, 4076779472: 18, 4179539152: 0, 3751720752: 1, 4182718256: 0, 3760142288: 1, 3765319664: 0, 3759585264: 89, 3865982416: 40, 4078843344: 11, 4185863632: 4, 4181669872: 6, 4290655952: 2}

def to_binary_data(key, value):
    # 确保 key 和 value 都在允许的范围内
    if not (0 <= key < 2**34):
        raise ValueError("key must be a non-negative integer less than 2^34.")
    if not (0 <= value < 2**22):
        raise ValueError("value must be a non-negative integer less than 2^22.")
    
    # 将 key 和 value 转换为二进制字符串，确保它们有足够的位数
    key_bin = f'{key:034b}'  # 34 位二进制，确保 key 为 34 位
    value_bin = f'{value:022b}'  # 22 位二进制，确保 value 为 22 位
    
    # 将二进制字符串拼接成一个 56 位的字符串
    full_bin = key_bin + value_bin
    
    # 将 56 位二进制字符串按 8 位分割，并转换为字节
    byte_data = bytearray()
    for i in range(0, len(full_bin), 8):
        byte_data.append(int(full_bin[i:i+8], 2))  # 每 8 位转换为一个字节
    
    # 返回字节数据，应该是 7 字节大小
    return bytes(byte_data)

def from_binary_data(byte_data):
    # 确保字节数据的长度是7字节
    if len(byte_data) != 7:
        raise ValueError("Byte data must be exactly 7 bytes.")
    
    # 将字节数据转换为二进制字符串
    full_bin = ''.join(f'{byte:08b}' for byte in byte_data)
    
    # 提取前 34 位作为 key 和后 22 位作为 value
    key_bin = full_bin[:34]
    value_bin = full_bin[34:]
    
    # 将二进制字符串转换为整数
    key = int(key_bin, 2)
    value = int(value_bin, 2)
    
    return key, value

def to_binary_data_dict(data_dict):
    # 存储合并后的二进制数据
    result = bytearray()
    
    for key, value in data_dict.items():
        # 获取每个键值对的二进制数据并合并
        result.extend(to_binary_data(key, value))
    
    # 返回合并后的二进制数据
    return bytes(result)

def from_binary_data_dict(binary_data):
    # 存储转换后的字典
    result = {}
    
    # 每个数据项的字节数是 7 字节
    # 根据字节流的长度，计算出有多少个数据项
    num_items = len(binary_data) // 7
    
    for i in range(num_items):
        # 提取 7 字节的数据
        item_data = binary_data[i * 7:(i + 1) * 7]
        
        # 将字节数据转换为 key 和 value
        key, value = from_binary_data(item_data)
        
        # 将 key 和 value 存入字典
        result[key] = value
    
    return result

print("Size in bytes:", sys.getsizeof(data_dict))

# 获取合并后的二进制数据
t1 = time.time()
merged_binary_data = to_binary_data_dict(data_dict)
t2 = time.time()
print(t2-t1)

# 打印合并后的二进制数据
print("Size in bytes:", len(merged_binary_data))

# 从字节数据转换回字典
t3 = time.time()
converted_dict = from_binary_data_dict(merged_binary_data)
t4 = time.time()
print(t4-t3)

# 打印转换回来的字典
print("Size in bytes:", sys.getsizeof(converted_dict))
